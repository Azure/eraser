/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/Azure/eraser/api/eraser.sh/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageCollectorListLister helps list ImageCollectorLists.
// All objects returned here must be treated as read-only.
type ImageCollectorListLister interface {
	// List lists all ImageCollectorLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageCollectorList, err error)
	// ImageCollectorLists returns an object that can list and get ImageCollectorLists.
	ImageCollectorLists(namespace string) ImageCollectorListNamespaceLister
	ImageCollectorListListerExpansion
}

// imageCollectorListLister implements the ImageCollectorListLister interface.
type imageCollectorListLister struct {
	indexer cache.Indexer
}

// NewImageCollectorListLister returns a new ImageCollectorListLister.
func NewImageCollectorListLister(indexer cache.Indexer) ImageCollectorListLister {
	return &imageCollectorListLister{indexer: indexer}
}

// List lists all ImageCollectorLists in the indexer.
func (s *imageCollectorListLister) List(selector labels.Selector) (ret []*v1alpha1.ImageCollectorList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageCollectorList))
	})
	return ret, err
}

// ImageCollectorLists returns an object that can list and get ImageCollectorLists.
func (s *imageCollectorListLister) ImageCollectorLists(namespace string) ImageCollectorListNamespaceLister {
	return imageCollectorListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageCollectorListNamespaceLister helps list and get ImageCollectorLists.
// All objects returned here must be treated as read-only.
type ImageCollectorListNamespaceLister interface {
	// List lists all ImageCollectorLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageCollectorList, err error)
	// Get retrieves the ImageCollectorList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageCollectorList, error)
	ImageCollectorListNamespaceListerExpansion
}

// imageCollectorListNamespaceLister implements the ImageCollectorListNamespaceLister
// interface.
type imageCollectorListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageCollectorLists in the indexer for a given namespace.
func (s imageCollectorListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageCollectorList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageCollectorList))
	})
	return ret, err
}

// Get retrieves the ImageCollectorList from the indexer for a given namespace and name.
func (s imageCollectorListNamespaceLister) Get(name string) (*v1alpha1.ImageCollectorList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagecollectorlist"), name)
	}
	return obj.(*v1alpha1.ImageCollectorList), nil
}
