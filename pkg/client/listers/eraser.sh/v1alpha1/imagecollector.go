/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/Azure/eraser/api/eraser.sh/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageCollectorLister helps list ImageCollectors.
// All objects returned here must be treated as read-only.
type ImageCollectorLister interface {
	// List lists all ImageCollectors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageCollector, err error)
	// ImageCollectors returns an object that can list and get ImageCollectors.
	ImageCollectors(namespace string) ImageCollectorNamespaceLister
	ImageCollectorListerExpansion
}

// imageCollectorLister implements the ImageCollectorLister interface.
type imageCollectorLister struct {
	indexer cache.Indexer
}

// NewImageCollectorLister returns a new ImageCollectorLister.
func NewImageCollectorLister(indexer cache.Indexer) ImageCollectorLister {
	return &imageCollectorLister{indexer: indexer}
}

// List lists all ImageCollectors in the indexer.
func (s *imageCollectorLister) List(selector labels.Selector) (ret []*v1alpha1.ImageCollector, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageCollector))
	})
	return ret, err
}

// ImageCollectors returns an object that can list and get ImageCollectors.
func (s *imageCollectorLister) ImageCollectors(namespace string) ImageCollectorNamespaceLister {
	return imageCollectorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageCollectorNamespaceLister helps list and get ImageCollectors.
// All objects returned here must be treated as read-only.
type ImageCollectorNamespaceLister interface {
	// List lists all ImageCollectors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ImageCollector, err error)
	// Get retrieves the ImageCollector from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ImageCollector, error)
	ImageCollectorNamespaceListerExpansion
}

// imageCollectorNamespaceLister implements the ImageCollectorNamespaceLister
// interface.
type imageCollectorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageCollectors in the indexer for a given namespace.
func (s imageCollectorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ImageCollector, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageCollector))
	})
	return ret, err
}

// Get retrieves the ImageCollector from the indexer for a given namespace and name.
func (s imageCollectorNamespaceLister) Get(name string) (*v1alpha1.ImageCollector, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagecollector"), name)
	}
	return obj.(*v1alpha1.ImageCollector), nil
}
